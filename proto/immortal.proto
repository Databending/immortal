syntax = "proto3";
import "google/protobuf/empty.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

import "common/message.proto";
import "failure/failure.proto";

package immortal;

// Used to report activity completions to core
// message ActivityExecutionResult {
//   string activity_id = 1;
//   string activity_run_id = 2;
//   oneof status {
//     Success completed = 1;
//     Failure failed = 2;
//     Cancellation cancelled = 3;
//     WillCompleteAsync will_complete_async = 4;
//   }
// }

// Used to report activity resolutions to lang. IE: This is what the activities
// are resolved with in the workflow.
// message ActivityResolution {
//   oneof status {
//     Success completed = 1;
//     Failure failed = 2;
//     Cancellation cancelled = 3;
//     DoBackoff backoff = 4;
//   }
// }

// Used to report successful completion either when executing or resolving
message Success { common.Payload result = 1; }

message Failure { failure.Failure failure = 1; }

/*
 * Used to report cancellation from both Core and Lang.
 * When Lang reports a cancelled activity, it must put a CancelledFailure in the
 * failure field. When Core reports a cancelled activity, it must put an
 * ActivityFailure with CancelledFailure as the cause in the failure field.
 */
message Cancellation { failure.Failure failure = 1; }

/*
 * Used in ActivityExecutionResult to notify Core that this Activity will
 * complete asynchronously. Core will forget about this Activity and free up
 * resources used to track this Activity.
 */
message WillCompleteAsync {}

/*
 * Issued when a local activity needs to retry but also wants to back off more
 * than would be reasonable to WFT heartbeat for. Lang is expected to schedule a
 * timer for the duration and then start a local activity of the same type &
 * same inputs with the provided attempt number after the timer has elapsed.
 *
 * This exists because Core does not have a concept of starting commands by
 * itself, they originate from lang. So expecting lang to start the timer / next
 * pass of the activity fits more smoothly.
 */
message DoBackoff {
  // The attempt number that lang should provide when scheduling the retry. If
  // the LA failed on attempt 4 and we told lang to back off with a timer, this
  // number will be 5.
  uint32 attempt = 1;
  google.protobuf.Duration backoff_duration = 2;
  // The time the first attempt of this local activity was scheduled. Must be
  // passed with attempt to the retry LA.
  google.protobuf.Timestamp original_schedule_time = 3;
}

// How retries ought to be handled, usable by both workflows and activities
message RetryPolicy {
  // Interval of the first retry. If retryBackoffCoefficient is 1.0 then it is
  // used for all retries.
  optional google.protobuf.Duration initial_interval = 1;
  // Coefficient used to calculate the next retry interval.
  // The next retry interval is previous interval multiplied by the coefficient.
  // Must be 1 or larger.
  double backoff_coefficient = 2;
  // Maximum interval between retries. Exponential backoff leads to interval
  // increase. This value is the cap of the increase. Default is 100x of the
  // initial interval.
  optional google.protobuf.Duration maximum_interval = 3;
  // Maximum number of attempts. When exceeded the retries stop even if not
  // expired yet. 1 disables retries. 0 means unlimited (up to the timeouts)
  int32 maximum_attempts = 4;
  // Non-Retryable errors types. Will stop retrying if the error type matches
  // this list. Note that this is not a substring match, the error *type* (not
  // message) must match exactly.
  repeated string non_retryable_error_types = 5;
}

enum ActivityCancellationType {
  // Default value, typically represented by the first enum value.
  ACTIVITY_CANCELLATION_TYPE_TRY_CANCEL = 0;
  // Wait for activity cancellation completion.
  ACTIVITY_CANCELLATION_TYPE_WAIT_CANCELLATION_COMPLETED = 1;
  // Do not request cancellation of the activity.
  ACTIVITY_CANCELLATION_TYPE_ABANDON = 2;
}

message Identifier { string id = 1; }

message ValueSet {
  string line = 1;
  Identifier callsite = 2;
}

message Metadata {
  string name = 1;
  string target = 2;
  string level = 3;
  string module_path = 4;
  string location = 5;
  ValueSet fields = 6;
  Identifier callsite = 7;
  string kind = 8;
}

message Event {
  ValueSet fields = 1;
  Metadata metadata = 2;
  string parent = 3;
}

message ActivityResultV1 {
  string activity_id = 1;
  string activity_run_id = 2;
  oneof status {
    Success completed = 3;
    Failure failed = 4;
    Cancellation cancelled = 5;
    // WillCompleteAsync will_complete_async = 6;
  }

  string workflow_id = 6;
}

message ActivityResultVersion {
  oneof version { ActivityResultV1 v1 = 1; }
}

message CallResultV1 {
  string call_id = 1;
  string call_run_id = 2;
  oneof status {
    Success completed = 3;
    Failure failed = 4;
    Cancellation cancelled = 5;
  }
}

message CallResultVersion {
  oneof version { CallResultV1 v1 = 1; }
}

message WorkflowResultV1 {
  string workflow_id = 1;
  string worker_id = 2;
  oneof status {
    Success completed = 3;
    Failure failed = 4;
    Cancellation cancelled = 5;
  }
}

message WorkflowResultVersion {
  oneof version { WorkflowResultV1 v1 = 1; }
}

message StartWorkflowOptionsV1 {
  string workflow_type = 1;
  string workflow_version = 2;
  common.Payloads input = 3;
  string task_queue = 4;
  string workflow_id = 5;
}

message ClientStartWorkflowOptionsVersion {
  oneof version { ClientStartWorkflowOptionsV1 v1 = 1; }
}

message ClientStartWorkflowOptionsV1 {
  string workflow_type = 1;
  string workflow_version = 2;
  common.Payloads input = 3;
  string task_queue = 4;
  optional string workflow_id = 5;
}

message StartWorkflowOptionsVersion {
  oneof version { StartWorkflowOptionsV1 v1 = 1; }
}

message RequestStartActivityOptionsV1 {
  string activity_id = 1;
  string activity_type = 2;
  common.Payload activity_input = 3;
  string workflow_id = 4;
  string task_queue = 5;
  optional google.protobuf.Duration schedule_to_start_timeout = 6;
  optional google.protobuf.Duration start_to_close_timeout = 7;
  optional google.protobuf.Duration schedule_to_close_timeout = 8;
  optional google.protobuf.Duration heartbeat_timeout = 9;
  ActivityCancellationType cancellation_type = 10;
  RetryPolicy retry_policy = 11;
}

message StartActivityOptionsV1 {
  string activity_id = 1;
  string activity_type = 2;
  common.Payload activity_input = 3;
  string workflow_id = 4;
  string activity_run_id = 5;
}

message StartCallOptionsV1 {
  string call_id = 1;
  string call_type = 2;
  common.Payload call_input = 3;
  string call_run_id = 4;
}

message StartNotificationOptionsV1 {
  string notification_id = 1;
  string notification_type = 2;
  common.Payload notification_input = 3;
}

message StartActivityOptionsVersion {
  oneof version { StartActivityOptionsV1 V1 = 1; }
}

message RequestStartActivityOptionsVersion {
  oneof version { RequestStartActivityOptionsV1 V1 = 1; }
}

message RegisterImmortalWorkerV1 {
  string worker_id = 1;
  string worker_type = 2;
  repeated RegisteredWorkflow registered_workflows = 3;
  repeated RegisteredActivity registered_activities = 4;
  repeated RegisteredCall registered_calls = 5;
  repeated RegisteredNotification registered_notifications = 6;
  int32 workflow_capacity = 7;
  int32 activity_capacity = 8;
  string task_queue = 9;
}

message RegisteredWorkflow {
  string workflow_type = 1;
  bytes args = 2;
  bytes output = 3;
}

message RegisteredActivity {
  string activity_type = 1;
  bytes args = 2;
  bytes output = 3;
}

message RegisteredCall {
  string call_type = 1;
  bytes args = 2;
  bytes output = 3;
}

message RegisteredNotification {
  string notification_type = 1;
  bytes args = 2;
}
//
// message RegisterImmortalWorkerVersion {
//   oneof version {
//     RegisterImmortalWorkerV1 v1 = 1;
//   }
// }

message ImmortalWorkerActionV1 {
  oneof action {
    StartWorkflowOptionsV1 start_workflow = 1;
    StartActivityOptionsV1 start_activity = 2;
    int32 heartbeat = 3;
    StartCallOptionsV1 start_call = 4;
    StartNotificationOptionsV1 notify = 5;
  }
}
enum Level {
  /// The "trace" level.
  ///
  /// Designates very low priority, often extremely verbose, information.
  Trace = 0;
  /// The "debug" level.
  ///
  /// Designates lower priority information.
  Debug = 1;
  /// The "info" level.
  ///
  /// Designates useful information.
  Info = 2;
  /// The "warn" level.
  ///
  /// Designates hazardous situations.
  Warn = 3;
  /// The "error" level.
  ///
  /// Designates very serious errors.
  Error = 4;
}
message Log {
  int64 when = 1;
  string message = 2;
  string workflow_id = 3;
  optional string activity_id = 4;
  optional string activity_run_id = 5;
  optional bytes metadata = 6;
  Level level = 7;
}

// the naming might be backwards lol
message ImmortalServerActionV1 {
  oneof action {
    RegisterImmortalWorkerV1 register_worker = 1;
    int32 workflow_heartbeat = 2;
    int32 activity_heartbeat = 3;
    Log log_event = 4;
    int32 heartbeat = 5;
  }
}

message ImmortalServerActionVersion {
  oneof version { ImmortalServerActionV1 v1 = 1; }
}

message ImmortalWorkerActionVersion {
  oneof version { ImmortalWorkerActionV1 v1 = 1; }
}

message ClientStartWorkflowResponse { string workflow_id = 1; }

message NotifyVersion {
  oneof version { NotifyV1 v1 = 1; }
}

message NotifyV1 {
  string notify_type = 1;
  string notify_version = 2;
  common.Payload input = 3;
  repeated string task_queues = 4;
}

message CallVersion {
  oneof version { CallV1 v1 = 1; }
}
message CallV1 {
  string call_type = 1;
  string call_version = 2;
  common.Payload input = 3;
  string task_queue = 4;
}

message WorkerCallVersion {
  oneof version { WorkerCallV1 v1 = 1; }
}
message WorkerCallV1 {
  string call_type = 1;
  string call_version = 2;
  common.Payloads input = 3;
  string task_queue = 4;
  string call_id = 5;
}

service Immortal {
  rpc RegisterWorker(stream ImmortalServerActionVersion)
      returns (stream ImmortalWorkerActionVersion) {}
  rpc StartWorkflow(ClientStartWorkflowOptionsVersion)
      returns (ClientStartWorkflowResponse) {}
  rpc StartActivity(RequestStartActivityOptionsVersion)
      returns (ActivityResultVersion) {}
  rpc CompletedActivity(ActivityResultVersion) returns (google.protobuf.Empty) {
  }
  rpc CompletedWorkflow(WorkflowResultVersion) returns (google.protobuf.Empty) {
  }
  rpc CompletedCall(CallResultVersion) returns (google.protobuf.Empty) {}

  rpc Notify(NotifyVersion) returns (google.protobuf.Empty) {}
  rpc Call(CallVersion) returns (CallResultVersion) {}
}

service ImmortalServerless {
  rpc Run(StartActivityOptionsVersion)
      returns (stream ImmortalServerlessActionVersion) {}
}

message ImmortalServerlessActionV1 {
  oneof action {
    int32 workflow_heartbeat = 1;
    int32 activity_heartbeat = 2;
    Log log_event = 3;
    int32 heartbeat = 4;
    ActivityResultVersion result = 5;
  }
}

message ImmortalServerlessActionVersion {
  oneof version { ImmortalServerlessActionV1 v1 = 1; }
}
